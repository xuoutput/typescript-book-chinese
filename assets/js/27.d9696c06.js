(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{232:function(t,e,_){"use strict";_.r(e);var i=_(0),v=Object(i.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),_("blockquote",[_("p",[_("a",{attrs:{href:"https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文链接: what are covariance and contravariance"),_("OutboundLink")],1)])]),t._v(" "),_("p",[_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Subtyping",target:"_blank",rel:"noopener noreferrer"}},[t._v("子类型"),_("OutboundLink")],1),t._v(" 在编程理论上是一个复杂的话题，而他的复杂之处来自于一对经常会被混淆的现象，我们称之为"),_("em",[t._v("协变")]),t._v("与"),_("em",[t._v("逆变")]),t._v("。这篇文章将会解释上述两个概念。")]),t._v(" "),_("p",[t._v("开始文章之前我们先约定如下的标记：")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),_("p",[t._v("假设我有如下三种类型：")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),_("p",[t._v("不安全。理由同(1)。")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),_("p",[t._v("如上所述，我们得出结论：")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),_("p",[_("strong",[t._v("一个有趣的现象")]),t._v("：在 "),_("code",[t._v("TypeScript")]),t._v(" 中， "),_("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/wiki/FAQ#why-are-function-parameters-bivariant",target:"_blank",rel:"noopener noreferrer"}},[t._v("参数类型是双向协变的"),_("OutboundLink")],1),t._v("\n，也就是说既是协变又是逆变的，而这并不安全。但是现在你可以在 "),_("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-6.html",target:"_blank",rel:"noopener noreferrer"}},[_("code",[t._v("TypeScript 2.6")]),_("OutboundLink")],1),t._v(" 版本中通过 "),_("code",[t._v("--strictFunctionTypes")]),t._v(" 或 "),_("code",[t._v("--strict")]),t._v(" 标记来修复这个问题。")]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),_("p",[t._v("答案有点微妙。如果列表是不可变的（immutable），那么答案是肯定的，因为类型很安全。但是假如列表是可变的，那么答案绝对是否定的！")]),t._v(" "),t._m(22),t._v(" "),_("p",[t._v("总结一下，我们可以允许不变的列表（immutable）在它的参数类型上是协变的，但是对于可变的列表（mutable），其参数类型则必须是不变的（invariant），既不是协变也不是逆变。")]),t._v(" "),_("p",[_("strong",[t._v("一个有趣的现象")]),t._v("：在 "),_("code",[t._v("Java")]),t._v(" 中，数组"),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Covariance_and_contravariance_%28computer_science%29#Covariant_arrays_in_Java_and_C.23",target:"_blank",rel:"noopener noreferrer"}},[t._v("既是可变的，又是协变的"),_("OutboundLink")],1),t._v("。当然，这并不安全。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"协变与逆变"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协变与逆变","aria-hidden":"true"}},[this._v("#")]),this._v(" 协变与逆变")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("code",[t._v("A ≼ B")]),t._v(" 意味着 "),_("code",[t._v("A")]),t._v(" 是 "),_("code",[t._v("B")]),t._v(" 的子类型。")]),t._v(" "),_("li",[_("code",[t._v("A → B")]),t._v(" 指的是以 "),_("code",[t._v("A")]),t._v(" 为参数类型，以 "),_("code",[t._v("B")]),t._v(" 为返回值类型的函数类型。")]),t._v(" "),_("li",[_("code",[t._v("x : A")]),t._v(" 意味着 "),_("code",[t._v("x")]),t._v(" 的类型为 "),_("code",[t._v("A")]),t._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"一个有趣的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个有趣的问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 一个有趣的问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[e("code",[this._v("Greyhound ≼ Dog ≼ Animal")])])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[_("code",[t._v("Greyhound")]),t._v(" （灰狗）是 "),_("code",[t._v("Dog")]),t._v(" （狗）的子类，而 "),_("code",[t._v("Dog")]),t._v(" 则是 "),_("code",[t._v("Animal")]),t._v(" （动物）的子类。由于子类型通常是可传递的，因此我们也称 "),_("code",[t._v("Greyhound")]),t._v(" 是 "),_("code",[t._v("Animal")]),t._v(" 的子类。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("问题")]),this._v("：以下哪种类型是 "),e("code",[this._v("Dog → Dog")]),this._v(" 的子类呢？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[e("code",[this._v("Greyhound → Greyhound")])]),this._v(" "),e("li",[e("code",[this._v("Greyhound → Animal")])]),this._v(" "),e("li",[e("code",[this._v("Animal → Animal")])]),this._v(" "),e("li",[e("code",[this._v("Animal → Greyhound")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("让我们来思考一下如何解答这个问题。首先我们假设 "),e("code",[this._v("f")]),this._v(" 是一个以 "),e("code",[this._v("Dog → Dog")]),this._v(" 为参数的函数。它的返回值并不重要，为了具体描述问题，我们假设函数结构体是这样的： "),e("code",[this._v("f : (Dog → Dog) → String")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("现在我想给函数 "),e("code",[this._v("f")]),this._v(" 传入某个函数 "),e("code",[this._v("g")]),this._v(" 来调用。我们来瞧瞧当 "),e("code",[this._v("g")]),this._v(" 为以上四种类型时，会发生什么情况。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("1. 我们假设 "),e("code",[this._v("g : Greyhound → Greyhound")]),this._v("， "),e("code",[this._v("f(g)")]),this._v(" 的类型是否安全？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("不安全。因为参数 "),e("code",[this._v("(g)")]),this._v(" 有可能是一个不同于灰狗但又是狗的子类，例如 "),e("code",[this._v("GermanShepherd")]),this._v(" （牧羊犬）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("2. 我们假设 "),e("code",[this._v("g : Greyhound → Animal")]),this._v("， "),e("code",[this._v("f(g)")]),this._v(" 的类型是否安全？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("3. 我们假设 "),e("code",[this._v("g : Animal → Animal")]),this._v("， "),e("code",[this._v("f(g)")]),this._v(" 的类型是否安全？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("不安全。因为 "),e("code",[this._v("f")]),this._v(" 有可能在调用完参数之后，让返回值，也就是 "),e("code",[this._v("Animal")]),this._v(" （动物）狗叫。并非所有动物都会狗叫。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("4. 我们假设 "),e("code",[this._v("g : Animal → Greyhound")]),this._v("， "),e("code",[this._v("f(g)")]),this._v(" 的类型是否安全？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("是的，它的类型是安全的。首先，"),e("code",[this._v("f")]),this._v(" 可能会以任何狗的品种来作为参数调用，而所有的狗都是动物。其次，它可能会假设结果是一条狗，而所有的灰狗都是狗。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"展开讲讲？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#展开讲讲？","aria-hidden":"true"}},[this._v("#")]),this._v(" 展开讲讲？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[e("code",[this._v("(Animal → Greyhound) ≼ (Dog → Dog)")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("返回值类型很容易理论：灰狗是狗的子类。但参数类型则是相反的：动物是狗的"),e("em",[this._v("父类")]),this._v("！")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("用合适的术语来描述这个奇怪的表现，可以说我们允许一个函数类型中，返回值类型是"),_("em",[t._v("协变")]),t._v("的，而参数类型是"),_("em",[t._v("逆变")]),t._v("的。返回值类型是协变的，意思是 "),_("code",[t._v("A ≼ B")]),t._v(" 就意味着 "),_("code",[t._v("(T → A) ≼ (T → B)")]),t._v(" 。参数类型是逆变的，意思是 "),_("code",[t._v("A ≼ B")]),t._v(" 就意味着 "),_("code",[t._v("(B → T) ≼ (A → T)")]),t._v(" （ "),_("code",[t._v("A")]),t._v(" 和 "),_("code",[t._v("B")]),t._v(" 的位置颠倒过来了）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"那其他类型呢？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#那其他类型呢？","aria-hidden":"true"}},[this._v("#")]),this._v(" 那其他类型呢？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("问题")]),this._v("："),e("code",[this._v("List<Dog>")]),this._v(" 能否为 "),e("code",[this._v("List<Animal>")]),this._v(" 的子类？")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("原因是，假设我需要一串 "),_("code",[t._v("List<Animal>")]),t._v(" 而你传给我一串 "),_("code",[t._v("List<Dog>")]),t._v("。由于我认为我拥有的是一串 "),_("code",[t._v("List<Animal>")]),t._v(" ，我可能会尝试往列表插入一只 "),_("code",[t._v("Cat")]),t._v("。那么你的 "),_("code",[t._v("List<Dog>")]),t._v(" 里面就会有一只猫！类型系统不应该允许这种情况发生。")])}],!1,null,null,null);v.options.__file="covarianceAndContravariance.md";e.default=v.exports}}]);