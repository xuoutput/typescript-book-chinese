(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{181:function(t,s,a){"use strict";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举","aria-hidden":"true"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),a("p",[t._v("枚举是组织收集有关联变量的一种方式，许多程序语言（如：c/c#/Java）都有枚举数据类型。下面是定义一个 TypeScript 枚举类型的方式：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" CardSuit "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Clubs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Diamonds"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Hearts"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Spades\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 简单的使用枚举类型")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Card "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" CardSuit"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Clubs"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 类型安全")]),t._v("\nCard "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'not a member of card suit'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Error: string 不能赋值给 `CardSuit` 类型")]),t._v("\n")])])]),a("p",[t._v("这些枚举类型的值都是数字类型，因此它们被称为数字类型枚举。")]),t._v(" "),a("h2",{attrs:{id:"数字类型枚举与数字类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字类型枚举与数字类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数字类型枚举与数字类型")]),t._v(" "),a("p",[t._v("数字类型枚举，允许我们将数字类型或者其他任何与数字类型兼容的类型赋值给枚举类型的实例。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Color "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Red"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Green"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Blue\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" col "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Red"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncol "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 有效的，这也是 Color.Red")]),t._v("\n")])])]),a("h2",{attrs:{id:"数字类型枚举与字符串类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字类型枚举与字符串类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数字类型枚举与字符串类型")]),t._v(" "),a("p",[t._v("在我们继续深入枚举类型之前，先让我们看看它编译的 JavaScript，以下是一个简单的 TypeScript 枚举类型：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Tristate "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  False"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  True"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Unknow\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("编译成 JavaScript：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'False'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'False'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'True'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'True'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'Unknown'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Unknown'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("先让我们聚焦于代码高亮的一行，其中 "),a("code",[t._v("Tristate['False'] = 0")]),t._v(" 用于自我解释，例如将 "),a("code",[t._v("Tristate")]),t._v(" 对象里的 "),a("code",[t._v("False")]),t._v(" 成员值设置为 "),a("code",[t._v("0")]),t._v("。注意，JavaScript 赋值运算符返回的值是被赋予的值（在此例子中是 "),a("code",[t._v("0")]),t._v("），因此下一次 JavaScript 运行时执行的代码是 "),a("code",[t._v("Tristate[0] = 'False'")]),t._v("。意味着你可以使用 "),a("code",[t._v("Tristate")]),t._v(" 变量来把字符串枚举类型改造成一个数字或者是数字类型的枚举类型，如下所示：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Tristate "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  False"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  True"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Unkown\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 'False'")]),t._v("\n"),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'False'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("False"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 'False' because `Tristate.False == 0`")]),t._v("\n")])])]),a("h2",{attrs:{id:"改变与数字枚举关联的数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改变与数字枚举关联的数字","aria-hidden":"true"}},[t._v("#")]),t._v(" 改变与数字枚举关联的数字")]),t._v(" "),a("p",[t._v("默认情况下，第一个枚举值是 "),a("code",[t._v("0")]),t._v("，然后每个后续值依次递增 1：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Color "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Red"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n  Green"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n  Blue "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("但是，你可以通过特定的赋值来改变给任何枚举成员关联的数字，如下例子，我们从 3 开始依次递增：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Color "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  DarkRed "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n  DarkGreen"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n  DarkBlue "),a("span",{attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("我通常用 "),a("code",[t._v("= 1")]),t._v(" 初始化，因为在枚举类型值里，它能让你做一个安全可靠的检查。")])]),t._v(" "),a("h2",{attrs:{id:"使用数字类型作为标志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用数字类型作为标志","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用数字类型作为标志")]),t._v(" "),a("p",[t._v("枚举的一个很好用途是使用枚举作为标志。这些标志允许你检查一组条件中的某个条件是否为真。考虑如下代码例子，我们有一组关于 animals 的属性：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" AnimalFlags "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  None        "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  HasClaws    "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  CanFly      "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  EatsFish    "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Endangered  "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在这里，我们使用了左移的位运算符，将数字 "),a("code",[t._v("1")]),t._v(" 的二进制向左移动位置得到数字 "),a("code",[t._v("0001")]),t._v("、"),a("code",[t._v("0010")]),t._v("、"),a("code",[t._v("0100")]),t._v(" 和 "),a("code",[t._v("1000")]),t._v("（换成十进制结果是：1, 2, 4, 8）。当你在使用这边标记的时候，这些位运算符 "),a("code",[t._v("|")]),t._v(" (或)、"),a("code",[t._v("&")]),t._v(" （和）、"),a("code",[t._v("~")]),t._v(" （非）将会是你最好的朋友：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" AnimalFlags "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  None        "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  HasClaws    "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  CanFly      "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  flags"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AnimalFlags"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("any")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("printAnimalAbilities")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Animal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" animalFlags "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" animal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animalFlags "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v(" AnimalFlags"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HasClaws"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'animal has claws'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animalFlags "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v(" AnimalFlags"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CanFly"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'animal can fly'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animalFlags "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" AnimalFlags"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("None"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'nothing'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" animal "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" flags"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AnimalFlags"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("None "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("printAnimalAbilities")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// nothing")]),t._v("\nanimal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{attrs:{class:"token operator"}},[t._v("|=")]),t._v(" AnimalFlags"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HasClaws"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("printAnimalAbilities")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// animal has claws")]),t._v("\nanimal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{attrs:{class:"token operator"}},[t._v("&=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("~")]),t._v("AnimalFlags"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HasClaws"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("printAnimalAbilities")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// nothing")]),t._v("\nanimal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{attrs:{class:"token operator"}},[t._v("|=")]),t._v(" AnimalFlags"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HasClaws "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" AnimalFlags"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CanFly"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("printAnimalAbilities")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// animal has claws, animal can fly")]),t._v("\n")])])]),a("p",[t._v("在这里：")]),t._v(" "),a("ul",[a("li",[t._v("我们使用 "),a("code",[t._v("|=")]),t._v(" 来添加一个标志；")]),t._v(" "),a("li",[t._v("组合使用 "),a("code",[t._v("&=")]),t._v(" 和 "),a("code",[t._v("~")]),t._v(" 来清理一个标志；")]),t._v(" "),a("li",[a("code",[t._v("|")]),t._v(" 来合并标志。")])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("你可以组合标志，用来在枚举类型中定义方便快捷的方式，如下 "),a("code",[t._v("EndangeredFlyingClawedFishEating")]),t._v("：")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" AnimalFlags "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  None        "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  HasClaws    "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  CanFly      "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  EndangeredFlyingClawedFishEating "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" HasClaws "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" CanFly "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" EatsFish "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" Endangered\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"字符串枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串枚举","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串枚举")]),t._v(" "),a("p",[t._v("在上文中，我们只看到了数字类型的枚举，实际上，枚举类型的值，也可以是字符串类型。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" EvidenceTypeEnum "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token constant"}},[t._v("UNKNOWN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token constant"}},[t._v("PASSPORT_VISA")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'passport_visa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token constant"}},[t._v("PASSPORT")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'passport'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token constant"}},[t._v("SIGHTED_STUDENT_CARD")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'sighted_tertiary_edu_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token constant"}},[t._v("SIGHTED_KEYPASS_CARD")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'sighted_keypass_card'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token constant"}},[t._v("SIGHTED_PROOF_OF_AGE_CARD")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'sighted_proof_of_age_card'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这些可以更容易被处理和调试，因为它们提供有意义/可调试的字符串。")]),t._v(" "),a("p",[t._v("你可以使用它们用于简单的字符串比较：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Where `someStringFromBackend` will be '' | 'passport_visa' | 'passport' ... etc.")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" someStringFromBackend "),a("span",{attrs:{class:"token keyword"}},[t._v("as")]),t._v(" EvidenceTypeEnum"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Sample use in code")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" EvidenceTypeEnum"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("PASSPORT")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'You provided a passport'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// `passport`")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"常量枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量枚举","aria-hidden":"true"}},[t._v("#")]),t._v(" 常量枚举")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Tristate "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  False"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  True"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Unknown\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lie "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("False"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("const lie = Tristate.False")]),t._v(" 编译成 JavaScript "),a("code",[t._v("let lie = Tristate.False")]),t._v(" (是的，编译后与编译前，几乎相同)。这意味着在运行执行时，它将会查找变量 "),a("code",[t._v("Tristate")]),t._v(" 和 "),a("code",[t._v("Tristate.False")]),t._v("。在此处或得性能提升的一个小技巧是使用常量枚举：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Tristate "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  False"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  True"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Unknown\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lie "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("False"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("将会被编译成：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lie "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("编译器将会：")]),t._v(" "),a("ul",[a("li",[t._v("内联枚举的任何用法（"),a("code",[t._v("0")]),t._v(" 而不是 "),a("code",[t._v("Tristate.False")]),t._v("）；")]),t._v(" "),a("li",[t._v("不会为枚举类型编译成任何 JavaScript（在这个例子中，运行时没有 "),a("code",[t._v("Tristate")]),t._v(" 变量），因为它使用内联语法。")])]),t._v(" "),a("h3",{attrs:{id:"常量枚举-preserveconstenums-选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量枚举-preserveconstenums-选项","aria-hidden":"true"}},[t._v("#")]),t._v(" 常量枚举 "),a("code",[t._v("preserveConstEnums")]),t._v(" 选项")]),t._v(" "),a("p",[t._v("使用内联语法对性能有明显的提升作用。运行时没有 "),a("code",[t._v("Tristate")]),t._v(" 变量的事实，是因为编译器帮助你把一些在运行时没有用到的不编译成 JavaScript。然而，你可能想让编译器仍然把枚举类型编译成 JavaScript，用于如上例子中从字符串到数字，或者是从数字到字符串的查找。在这种情景下，你可以使用编译选项 "),a("code",[t._v("--preserveConstEnums")]),t._v("，它会编译出 "),a("code",[t._v("var Tristate")]),t._v(" 的定义，因此你在运行时，手动使用 "),a("code",[t._v("Tristate['False']")]),t._v(" 和 "),a("code",[t._v("Tristate[0]")]),t._v("。并且这不会以任何方式影响内联。")]),t._v(" "),a("h2",{attrs:{id:"有静态方法的枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有静态方法的枚举","aria-hidden":"true"}},[t._v("#")]),t._v(" 有静态方法的枚举")]),t._v(" "),a("p",[t._v("你可以使用 "),a("code",[t._v("enum")]),t._v(" + "),a("code",[t._v("namespace")]),t._v(" 的声明的方式向枚举类型添加静态方法。如下例所示，我们将静态成员 "),a("code",[t._v("isBusinessDay")]),t._v(" 添加到枚举上：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Weekday "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Monday"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Tuseday"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Wednesday"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Thursday"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Friday"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Saturday"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Sunday\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" Weekday "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isBusinessDay")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("day"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Weekday"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("day"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" Weekday"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Saturday"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" Weekday"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Sunday"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("default")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mon "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Weekday"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Monday"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sun "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Weekday"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Sunday"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Weekday"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isBusinessDay")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mon"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Weekday"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isBusinessDay")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sun"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"开放式枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开放式枚举","aria-hidden":"true"}},[t._v("#")]),t._v(" 开放式枚举")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("你只有在不使用模块时，开放式的枚举才有意义，你应该使用模块，因此这部分在文章最后。")])]),t._v(" "),a("p",[t._v("让我们再一次看看编译成 JavaScript 的枚举是什么样子：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'False'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'False'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'True'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'True'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'Unknown'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Unknown'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tristate "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("我们已经解释了 "),a("code",[t._v("Tristate[Tristate['False'] = 0] = 'False'")]),t._v(" 部分，现在我们来看看包裹函数 "),a("code",[t._v("(function (Tristate) { /* code here */})(Tristate || (Tristate = {}))")]),t._v("，特别是 "),a("code",[t._v("(Tristate || (Tristate = {}))")]),t._v(" 部分。这捕获了一个局部变量 "),a("code",[t._v("TriState")]),t._v("，它将指向已经定义的 "),a("code",[t._v("TriState")]),t._v(" 或者是使用一个新的控对象初始化它。")]),t._v(" "),a("p",[t._v("这意味着你可以跨多个文件拆分（和扩展）枚举定义，如下所示，你可以把 "),a("code",[t._v("Color")]),t._v(" 的定义拆分至两个块中：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Color "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Red"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Green"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Blue\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Color "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  DarkRed "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  DarkGreen"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  DarkBlue\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("你应该在枚举的延续块中，初始化第一个成员，以便生成的代码不是先前定义的枚举类型值。TypeScript 将会发出警告，如果你定义初始值（错误信息："),a("code",[t._v("In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element.")]),t._v("）。")])])])}],!1,null,null,null);o.options.__file="enums.md";s.default=o.exports}}]);